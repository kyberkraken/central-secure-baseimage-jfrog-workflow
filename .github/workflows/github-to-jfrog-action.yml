name: Build and Push Base Images

on:
  push:
    branches:
      - main
jobs:
  push-to-gar:
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write' 
    steps: 
    - name: Check out code
      uses: actions/checkout@v2
      
    - name: Read file
      id: readfile
      run: |
        
        temp="$(grep "." image-name.txt)"
        ftemp="${{ secrets.JFROG_URL_PATH }}/$temp"
        echo ::set-output name=File_Data::$ftemp
        echo ::set-output name=Image_Name::$temp
        echo "Extracted data: $ftemp"
    
    - name: Login to JFrog üê∏  
      uses: docker/login-action@v1
      with:
        registry: ${{ secrets.JFROG_URL }}
        username: ${{ secrets.RTF_USERNAME }}
        password: ${{ secrets.RTF_TOKEN }}

    

    - name: Build the image using Dockerfile
      run: |
        docker build . --file Dockerfile --tag ${{ steps.readfile.outputs.File_Data }}
        docker save -o vuln-image.tar ${{ steps.readfile.outputs.File_Data }}
          
    - name: Run Trivy vulnerability scanner
      id: trivy
      uses: aquasecurity/trivy-action@0.12.0
      with:
          input: /github/workspace/vuln-image.tar
          format: 'json'
          ignore-unfixed: false
          output: trivy-results.json
          severity: 'CRITICAL,HIGH'

    - name: Store vulnerabilities in a variable
      id: trivyvuln
      run: |
        trivy_vuln=$(cat trivy-results.json | jq -r '.Results[].Vulnerabilities')
        echo "::set-output name=vulnerability::$trivy_vuln"
        echo "$trivy_vuln"

    - name: Push the image to jfrog artifactory
      if: steps.trivyvuln.outputs.vulnerability == 'null'
      run: |
        docker push ${{ steps.readfile.outputs.File_Data }}

    #- name: Build Docker Image
    #  if: steps.trivyvuln.outputs.vulnerability == 'null'
    #  uses: docker/build-push-action@v2
    #  with:
    #      context: .
    #      push: true
    #      tags: ${{ steps.readfile.outputs.File_Data }}

    - name: Run subsequent steps if vulnerabilities found
      if: steps.trivyvuln.outputs.vulnerability != 'null'
      run: |
        echo "Critical and High vulnerabilities detected - Image cannot be pushed! Please patch the vulnerabilities in base image and try again."
          
